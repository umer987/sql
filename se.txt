use sex
--lab 4 ddl CREATE, DROP, ALTER, and TRUNCATE

create table stud(
id int primary key,
namee varchar(100),
course varchar(100),

)

insert into stud(id , namee , course)
values
(1,'jj thomas','maths'),
(2,'jj','ascghs');
alter table stud add email varchar(100)

select * from stud
drop table stud
truncate table stud

--lab 7 dml Insert, Update & Delete Statements.
CREATE TABLE Students (
    StudentID INT PRIMARY KEY,
    Name VARCHAR(50),
    Age INT,
    Grade CHAR(1)
);
INSERT INTO Students (StudentID, Name, Age, Grade)
VALUES 
(1, 'John Doe', 20, 'A'),
(2,'decc',21,'b');
select * from Students
update Students set Age = 23 where StudentID = 1
delete from Students where grade = 'a'
--lab 09 aggrate function 
CREATE TABLE Sales (
    SaleID INT PRIMARY KEY,
    Product VARCHAR(50),
    Category VARCHAR(50),
    Quantity INT,
    PricePerUnit DECIMAL(10, 2),
    SaleDate DATE,
    Store VARCHAR(50)
);

INSERT INTO Sales (SaleID, Product, Category, Quantity, PricePerUnit, SaleDate, Store)
VALUES
(1, 'Laptop', 'Electronics', 2, 800, '2025-01-01', 'Downtown'),
(2, 'Smartphone', 'Electronics', 5, 600, '2025-01-02', 'Uptown'),
(3, 'Desk Chair', 'Furniture', 3, 150, '2025-01-03', 'Downtown'),
(4, 'Bookshelf', 'Furniture', 1, 200, '2025-01-04', 'Suburban'),
(5, 'Coffee Table', 'Furniture', 4, 120, '2025-01-05', 'Uptown'),
(6, 'Headphones', 'Electronics', 10, 50, '2025-01-06', 'Suburban'),
(7, 'Monitor', 'Electronics', 3, 300, '2025-01-07', 'Downtown');
select * from Sales
select SUM(Quantity) as total_item_sold from Sales
select AVG(priceperunit) as avgrage_priceperunit from Sales
select COUNT(*) as total from Sales
select MAX(priceperunit) as max_price from Sales
select min(priceperunit) as max_price from Sales
select SUM(Quantity* PricePerUnit)as totalprofit from Sales
SELECT Category, SUM(Quantity * PricePerUnit) AS TotalRevenue FROM Sales GROUP BY Category;
SELECT Store, COUNT(*) AS NumberOfSales FROM Sales GROUP BY Store;

select * from Sales

--most sale product
SELECT TOP 1 Product, SUM(Quantity) AS TotalQuantity
FROM Sales
GROUP BY Product
ORDER BY TotalQuantity DESC;



--multiple functions

SELECT 
    SaleID, 
    SUM(Quantity * PricePerUnit) AS TotalSales, 
    AVG(Quantity) AS AverageQuantitySold, 
    MIN(PricePerUnit) AS MinimumPrice, 
    MAX(PricePerUnit) AS MaximumPrice
FROM 
    Sales
GROUP BY 
    SaleID;
	---monthly summary
	select SaleDate,
	SUM(PricePerUnit) as total_revenue
	
	from Sales
	group by SaleDate

	-----lab 10 joins 
	--inner join
	CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerName VARCHAR(100),
    OrderDate DATE
);
INSERT INTO Orders (OrderID, CustomerName, OrderDate)
VALUES
(1, 'Alice', '2025-01-01'),
(2, 'Bob', '2025-01-02'),
(3, 'Charlie', '2025-01-03'),
(4, 'David', '2025-01-04');
CREATE TABLE OrderDetails (
    OrderDetailID INT PRIMARY KEY,
    OrderID INT,
    ProductName VARCHAR(100),
    Quantity INT,
    Price DECIMAL(10, 2)
);
INSERT INTO OrderDetails (OrderDetailID, OrderID, ProductName, Quantity, Price)
VALUES
(1, 1, 'Laptop', 2, 800),
(2, 1, 'Smartphone', 1, 600),
(3, 2, 'Desk Chair', 3, 150),
(4, 3, 'Laptop', 1, 850),
(5, 4, 'Smartphone', 2, 650);

--innerjoins

select * from Orders
select * from OrderDetails
SELECT 
    *
FROM 
    Orders
INNER JOIN 
    OrderDetails
ON 
    Orders.OrderID = OrderDetails.OrderID;
	-- left join-------------------------------------------------
	select * from Orders
select * from OrderDetails
	select * from Orders left join OrderDetails on Orders.OrderID = OrderDetails.OrderDetailID

	--lab 11 nested queriess and sub quriess
	CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100),
    Country VARCHAR(100)
);
INSERT INTO Customers (CustomerID, CustomerName, Country)
VALUES
(1, 'Alice', 'USA'),
(2, 'Bob', 'Canada'),
(3, 'Charlie', 'UK'),
(4, 'David', 'Australia');

CREATE TABLE Purchases (
    PurchaseID INT PRIMARY KEY,
    CustomerID INT,
    ProductName VARCHAR(100),
    Quantity INT,
    Price DECIMAL(10, 2),
    PurchaseDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)
);
INSERT INTO Purchases (PurchaseID, CustomerID, ProductName, Quantity, Price, PurchaseDate)
VALUES
(1, 1, 'Laptop', 1, 1200, '2025-01-01'),
(2, 1, 'Smartphone', 2, 600, '2025-01-05'),
(3, 2, 'Tablet', 3, 400, '2025-01-10'),
(4, 3, 'Headphones', 1, 100, '2025-01-12'),
(5, 4, 'Smartwatch', 1, 250, '2025-01-15');
---group by
select * from Customers
select * from Purchases
--select
select productname, COUNT(*) from Purchases where Price>1000 group by ProductName
SELECT 
    CustomerName,
    (SELECT SUM(Quantity * Price)
     FROM Purchases
     WHERE Purchases.CustomerID = Customers.CustomerID) AS TotalSpent
FROM 
    Customers;
	----where
	SELECT 
    CustomerName
FROM 
    Customers
WHERE 
    CustomerID IN (SELECT CustomerID
                   FROM Purchases
                   GROUP BY CustomerID
                   HAVING SUM(Quantity * Price) > 1000);

	 